'use babel';
'use strict';

function rippleClick(event) {
    var item = event.target;

    if (!item) return;

    var rect = item.getBoundingClientRect();
    var x = (event.clientX || 80) - rect.left;
    var y = (event.clientY || 24) - rect.top;
    var ink = undefined;

    if (item.querySelectorAll('.ink').length === 0) {
        ink = document.createElement('span');

        ink.classList.add('ink');
        item.appendChild(ink);
    }

    ink = item.querySelector('.ink');
    ink.style.left = x + 'px';
    ink.style.top = y + 'px';

    setTimeout(function () {
        if (ink && ink.parentElement) {
            ink.parentElement.removeChild(ink);
        }
    }, 1000);
}

function apply() {
    var tabs = document.querySelectorAll('.tab-bar');

    // Ripple Effect for Tabs
    if (tabs) {
        Array.from(tabs).forEach(function (tab) {
            tab.removeEventListener('click', rippleClick);
            tab.addEventListener('click', rippleClick);

            atom.workspace.onDidChangeActivePaneItem(function () {
                var activeTab = document.querySelector('.tab-bar .tab.active');

                if (activeTab && activeTab.click) {
                    activeTab.click();
                }
            });
        });
    }
}

atom.workspace.onDidAddPane(function () {
    setImmediate(function () {
        return apply();
    });
});

module.exports = { apply: apply };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9ob21lL2RlcGxveWVyL2xlYXJuLWlkZS9idWlsZC9vdXQvYXBwL25vZGVfbW9kdWxlcy9sZWFybi1pZGUtbWF0ZXJpYWwtdWkvbGliL3RhYnMtc2V0dGluZ3MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsV0FBVyxDQUFDO0FBQ1osWUFBWSxDQUFDOztBQUViLFNBQVMsV0FBVyxDQUFDLEtBQUssRUFBRTtBQUN4QixRQUFJLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDOztBQUV4QixRQUFJLENBQUMsSUFBSSxFQUFFLE9BQU87O0FBRWxCLFFBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0FBQzFDLFFBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUEsR0FBSSxJQUFJLENBQUMsSUFBSSxDQUFDO0FBQzVDLFFBQU0sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE9BQU8sSUFBSSxFQUFFLENBQUEsR0FBSSxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQzNDLFFBQUksR0FBRyxHQUFBLFNBQUEsQ0FBQzs7QUFFUixRQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQzVDLFdBQUcsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDOztBQUVyQyxXQUFHLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUN6QixZQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3pCOztBQUVELE9BQUcsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLE9BQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUM7QUFDMUIsT0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQzs7QUFFekIsY0FBVSxDQUFDLFlBQU07QUFDYixZQUFJLEdBQUcsSUFBSSxHQUFHLENBQUMsYUFBYSxFQUFFO0FBQzFCLGVBQUcsQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ3RDO0tBQ0osRUFBRSxJQUFJLENBQUMsQ0FBQztDQUNaOztBQUVELFNBQVMsS0FBSyxHQUFHO0FBQ2IsUUFBSSxJQUFJLEdBQUcsUUFBUSxDQUFDLGdCQUFnQixDQUFDLFVBQVUsQ0FBQyxDQUFDOzs7QUFHakQsUUFBSSxJQUFJLEVBQUU7QUFDTixhQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxVQUFDLEdBQUcsRUFBSztBQUM5QixlQUFHLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLFdBQVcsQ0FBQyxDQUFDO0FBQzlDLGVBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7O0FBRTNDLGdCQUFJLENBQUMsU0FBUyxDQUFDLHlCQUF5QixDQUFDLFlBQU07QUFDM0Msb0JBQUksU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsc0JBQXNCLENBQUMsQ0FBQzs7QUFFL0Qsb0JBQUksU0FBUyxJQUFJLFNBQVMsQ0FBQyxLQUFLLEVBQUU7QUFDOUIsNkJBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztpQkFDckI7YUFDSixDQUFDLENBQUM7U0FDTixDQUFDLENBQUM7S0FDTjtDQUNKOztBQUVELElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLFlBQU07QUFDOUIsZ0JBQVksQ0FBQyxZQUFBO0FBQ1QsZUFEZSxLQUFLLEVBQUUsQ0FBQTtLQUFBLENBQUMsQ0FBQztDQUMvQixDQUFDLENBQUM7O0FBRUgsTUFBTSxDQUFDLE9BQU8sR0FBRyxFQUFFLEtBQUssRUFBTCxLQUFLLEVBQUUsQ0FBQyIsImZpbGUiOiIvaG9tZS9kZXBsb3llci9sZWFybi1pZGUvYnVpbGQvb3V0L2FwcC9ub2RlX21vZHVsZXMvbGVhcm4taWRlLW1hdGVyaWFsLXVpL2xpYi90YWJzLXNldHRpbmdzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBiYWJlbCc7XG4ndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIHJpcHBsZUNsaWNrKGV2ZW50KSB7XG4gICAgdmFyIGl0ZW0gPSBldmVudC50YXJnZXQ7XG5cbiAgICBpZiAoIWl0ZW0pIHJldHVybjtcblxuICAgIGNvbnN0IHJlY3QgPSBpdGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIGNvbnN0IHggPSAoZXZlbnQuY2xpZW50WCB8fCA4MCkgLSByZWN0LmxlZnQ7XG4gICAgY29uc3QgeSA9IChldmVudC5jbGllbnRZIHx8IDI0KSAtIHJlY3QudG9wO1xuICAgIGxldCBpbms7XG5cbiAgICBpZiAoaXRlbS5xdWVyeVNlbGVjdG9yQWxsKCcuaW5rJykubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKTtcblxuICAgICAgICBpbmsuY2xhc3NMaXN0LmFkZCgnaW5rJyk7XG4gICAgICAgIGl0ZW0uYXBwZW5kQ2hpbGQoaW5rKTtcbiAgICB9XG5cbiAgICBpbmsgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoJy5pbmsnKTtcbiAgICBpbmsuc3R5bGUubGVmdCA9IHggKyAncHgnO1xuICAgIGluay5zdHlsZS50b3AgPSB5ICsgJ3B4JztcblxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBpZiAoaW5rICYmIGluay5wYXJlbnRFbGVtZW50KSB7XG4gICAgICAgICAgICBpbmsucGFyZW50RWxlbWVudC5yZW1vdmVDaGlsZChpbmspO1xuICAgICAgICB9XG4gICAgfSwgMTAwMCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5KCkge1xuICAgIHZhciB0YWJzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnRhYi1iYXInKTtcblxuICAgIC8vIFJpcHBsZSBFZmZlY3QgZm9yIFRhYnNcbiAgICBpZiAodGFicykge1xuICAgICAgICBBcnJheS5mcm9tKHRhYnMpLmZvckVhY2goKHRhYikgPT4ge1xuICAgICAgICAgICAgdGFiLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmlwcGxlQ2xpY2spO1xuICAgICAgICAgICAgdGFiLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgcmlwcGxlQ2xpY2spO1xuXG4gICAgICAgICAgICBhdG9tLndvcmtzcGFjZS5vbkRpZENoYW5nZUFjdGl2ZVBhbmVJdGVtKCgpID0+IHtcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZlVGFiID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnRhYi1iYXIgLnRhYi5hY3RpdmUnKTtcblxuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVUYWIgJiYgYWN0aXZlVGFiLmNsaWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGl2ZVRhYi5jbGljaygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5cbmF0b20ud29ya3NwYWNlLm9uRGlkQWRkUGFuZSgoKSA9PiB7XG4gICAgc2V0SW1tZWRpYXRlKCgpID0+IGFwcGx5KCkpO1xufSk7XG5cbm1vZHVsZS5leHBvcnRzID0geyBhcHBseSB9O1xuIl19