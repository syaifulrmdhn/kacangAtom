(function() {
  module.exports = function() {
    var COLOR_REGEXES, Convert, MATCH_ORDER, f, n, s;
    Convert = (require('./Convert'))();
    COLOR_REGEXES = {
      HSL: /hsl\s*?\(\s*([0-9]|[1-9][0-9]|[1|2][0-9][0-9]|3[0-5][0-9]|360)\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*\)/i,
      HSLA: /hsla\s*?\(\s*([0-9]|[1-9][0-9]|[1|2][0-9][0-9]|3[0-5][0-9]|360)\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*?,\s*?(0|1|1.0|0*\.\d+)\s*?\)/i,
      HSV: /hsv\s*?\(\s*([0-9]|[1-9][0-9]|[1|2][0-9][0-9]|3[0-5][0-9]|360)\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*\)/i,
      HSVA: /hsva\s*?\(\s*([0-9]|[1-9][0-9]|[1|2][0-9][0-9]|3[0-5][0-9]|360)\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*?,\s*?([0-9]|[1-9][0-9]|100)\%?\s*?,\s*?(0|1|1.0|0*\.\d+)\s*?\)/i,
      VEC: /vec3\s*?\(\s*?([0]?\.[0-9]*|1\.0|1|0)[f]?\s*?\,\s*?([0]?\.[0-9]*|1\.0|1|0)[f]?\s*?\,\s*?([0]?\.[0-9]*|1\.0|1|0)[f]?\s*?\)/i,
      VECA: /vec4\s*?\(\s*?([0]?\.[0-9]*|1\.0|1|0)[f]?\s*?\,\s*?([0]?\.[0-9]*|1\.0|1|0)[f]?\s*?\,\s*?([0]?\.[0-9]*|1\.0|1|0)[f]?\s*?\,\s*?([0]?\.[0-9]*|1\.0|1|0)[f]?\s*?\)/i,
      RGB: /rgb\s*?\(\s*?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\s*?,\s*?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\s*?,\s*?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\s*?\)/i,
      RGBA: /rgba\s*?\(\s*?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][<0-9]|25[0-5])\s*?,\s*?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\s*?,\s*?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\s*?,\s*?(0|1|1.0|0*\.\d+)\s*?\)/i,
      HEX: /(\#[a-f0-9]{6}|\#[a-f0-9]{3})/i,
      HEXA: /rgba\s*?\(\s*(\#[a-f0-9]{6}|\#[a-f0-9]{3})\s*?,\s*?(0|1|1.0|0*\.\d+)\s*?\)/i
    };
    MATCH_ORDER = ['HSL', 'HSLA', 'HSV', 'HSVA', 'VEC', 'VECA', 'RGB', 'RGBA', 'HEXA', 'HEX'];
    n = function(number) {
      number = "" + number;
      if (atom.config.get('color-picker.abbreviateValues')) {
        if (number[0] === '0' && number[1] === '.') {
          return number.substring(1);
        } else if ((parseFloat(number, 10)) === 1) {
          return '1';
        }
      }
      return number;
    };
    f = function(number) {
      number = "" + number;
      if (number[3] && number[3] === '0') {
        return number.substring(0, 3);
      }
      return number;
    };
    s = function(string) {
      if (atom.config.get('color-picker.abbreviateValues')) {
        return string.replace(/\s/g, '');
      }
      return string;
    };
    return {
      find: function(string) {
        var SmartColor, _colors, _format, _match, _matches, _regExp, fn, i, j, len, len1;
        SmartColor = this;
        _colors = [];
        for (i = 0, len = MATCH_ORDER.length; i < len; i++) {
          _format = MATCH_ORDER[i];
          if (!(_regExp = COLOR_REGEXES[_format])) {
            continue;
          }
          _matches = string.match(new RegExp(_regExp.source, 'ig'));
          if (!_matches) {
            continue;
          }
          fn = function(_format, _match) {
            var _index;
            if ((_index = string.indexOf(_match)) === -1) {
              return;
            }
            _colors.push({
              match: _match,
              format: _format,
              start: _index,
              end: _index + _match.length,
              getSmartColor: function() {
                return SmartColor[_format](_match);
              },
              isColor: true
            });
            return string = string.replace(_match, (new Array(_match.length + 1)).join(' '));
          };
          for (j = 0, len1 = _matches.length; j < len1; j++) {
            _match = _matches[j];
            fn(_format, _match);
          }
        }
        return _colors;
      },
      color: function(format, value, RGBAArray) {
        return {
          format: format,
          value: value,
          RGBAArray: RGBAArray,
          equals: function(smartColor) {
            if (!smartColor) {
              return false;
            }
            return smartColor.RGBAArray[0] === this.RGBAArray[0] && smartColor.RGBAArray[1] === this.RGBAArray[1] && smartColor.RGBAArray[2] === this.RGBAArray[2] && smartColor.RGBAArray[3] === this.RGBAArray[3];
          },
          getAlpha: function() {
            return this.RGBAArray[3];
          },
          toRGB: function() {
            return s("rgb(" + (this.toRGBArray().join(', ')) + ")");
          },
          toRGBArray: function() {
            return [this.RGBAArray[0], this.RGBAArray[1], this.RGBAArray[2]];
          },
          toRGBA: function() {
            var _rgbaArray;
            _rgbaArray = this.toRGBAArray();
            return s("rgba(" + _rgbaArray[0] + ", " + _rgbaArray[1] + ", " + _rgbaArray[2] + ", " + (n(_rgbaArray[3])) + ")");
          },
          toRGBAArray: function() {
            return this.RGBAArray;
          },
          toHSL: function() {
            var _hslArray;
            _hslArray = this.toHSLArray();
            return s("hsl(" + _hslArray[0] + ", " + _hslArray[1] + "%, " + _hslArray[2] + "%)");
          },
          toHSLArray: function() {
            return Convert.rgbToHsl(this.toRGBArray());
          },
          toHSLA: function() {
            var _hslaArray;
            _hslaArray = this.toHSLAArray();
            return s("hsla(" + _hslaArray[0] + ", " + _hslaArray[1] + "%, " + _hslaArray[2] + "%, " + (n(_hslaArray[3])) + ")");
          },
          toHSLAArray: function() {
            return this.toHSLArray().concat([this.getAlpha()]);
          },
          toHSV: function() {
            var _hsvArray;
            _hsvArray = this.toHSVArray();
            return s("hsv(" + (Math.round(_hsvArray[0])) + ", " + ((_hsvArray[1] * 100) << 0) + "%, " + ((_hsvArray[2] * 100) << 0) + "%)");
          },
          toHSVArray: function() {
            return Convert.rgbToHsv(this.toRGBArray());
          },
          toHSVA: function() {
            var _hsvaArray;
            _hsvaArray = this.toHSVAArray();
            return s("hsva(" + (Math.round(_hsvaArray[0])) + ", " + ((_hsvaArray[1] * 100) << 0) + "%, " + ((_hsvaArray[2] * 100) << 0) + "%, " + (n(_hsvaArray[3])) + ")");
          },
          toHSVAArray: function() {
            return this.toHSVArray().concat([this.getAlpha()]);
          },
          toVEC: function() {
            var _vecArray;
            _vecArray = this.toVECArray();
            return s("vec3(" + (f(_vecArray[0])) + ", " + (f(_vecArray[1])) + ", " + (f(_vecArray[2])) + ")");
          },
          toVECArray: function() {
            return Convert.rgbToVec(this.toRGBArray());
          },
          toVECA: function() {
            var _vecaArray;
            _vecaArray = this.toVECAArray();
            return s("vec4(" + (f(_vecaArray[0])) + ", " + (f(_vecaArray[1])) + ", " + (f(_vecaArray[2])) + ", " + (f(_vecaArray[3])) + ")");
          },
          toVECAArray: function() {
            return this.toVECArray().concat([(this.getAlpha()).toFixed(2)]);
          },
          toHEX: function() {
            var _hex;
            _hex = Convert.rgbToHex(this.RGBAArray);
            if (atom.config.get('color-picker.abbreviateValues')) {
              if (_hex[0] === _hex[1] && _hex[2] === _hex[3] && _hex[4] === _hex[5]) {
                _hex = "" + _hex[0] + _hex[2] + _hex[4];
              }
            }
            if (atom.config.get('color-picker.uppercaseColorValues')) {
              _hex = _hex.toUpperCase();
            }
            return '#' + _hex;
          },
          toHEXA: function() {
            return s("rgba(" + (this.toHEX()) + ", " + (n(this.getAlpha())) + ")");
          }
        };
      },
      RGB: function(value) {
        return this.color('RGB', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.RGB);
          return [parseInt(_match[1], 10), parseInt(_match[2], 10), parseInt(_match[3], 10)].concat([1]);
        })());
      },
      RGBArray: function(value) {
        return this.color('RGBArray', value, (function() {
          return value.concat([1]);
        })());
      },
      RGBA: function(value) {
        return this.color('RGBA', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.RGBA);
          return [parseInt(_match[1], 10), parseInt(_match[2], 10), parseInt(_match[3], 10)].concat([parseFloat(_match[4], 10)]);
        })());
      },
      RGBAArray: function(value) {
        return this.color('RGBAArray', value, value);
      },
      HSL: function(value) {
        return this.color('HSL', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.HSL);
          return (Convert.hslToRgb([parseInt(_match[1], 10), parseInt(_match[2], 10), parseInt(_match[3], 10)])).concat([1]);
        })());
      },
      HSLArray: function(value) {
        return this.color('HSLArray', value, (function() {
          return (Convert.hslToRgb(value)).concat([1]);
        })());
      },
      HSLA: function(value) {
        return this.color('HSLA', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.HSLA);
          return (Convert.hslToRgb([parseInt(_match[1], 10), parseInt(_match[2], 10), parseInt(_match[3], 10)])).concat([parseFloat(_match[4], 10)]);
        })());
      },
      HSLAArray: function(value) {
        return this.color('HSLAArray', value, (function() {
          return (Convert.hslToRgb(value)).concat([value[3]]);
        })());
      },
      HSV: function(value) {
        return this.color('HSV', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.HSV);
          return (Convert.hsvToRgb([parseInt(_match[1], 10), parseInt(_match[2], 10), parseInt(_match[3], 10)])).concat([1]);
        })());
      },
      HSVArray: function(value) {
        return this.color('HSVArray', value, (function() {
          return (Convert.hsvToRgb(value)).concat([1]);
        })());
      },
      HSVA: function(value) {
        return this.color('HSVA', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.HSVA);
          return (Convert.hsvToRgb([parseInt(_match[1], 10), parseInt(_match[2], 10), parseInt(_match[3], 10)])).concat([parseFloat(_match[4], 10)]);
        })());
      },
      HSVAArray: function(value) {
        return this.color('HSVAArray', value, (function() {
          return (Convert.hsvToRgb(value)).concat([value[3]]);
        })());
      },
      VEC: function(value) {
        return this.color('VEC', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.VEC);
          return (Convert.vecToRgb([(parseFloat(_match[1], 10)).toFixed(2), (parseFloat(_match[2], 10)).toFixed(2), (parseFloat(_match[3], 10)).toFixed(2)])).concat([1]);
        })());
      },
      VECArray: function(value) {
        return this.color('VECArray', value, (function() {
          return (Convert.vecToRgb(value)).concat([1]);
        })());
      },
      VECA: function(value) {
        return this.color('VECA', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.VECA);
          return (Convert.vecToRgb([(parseFloat(_match[1], 10)).toFixed(2), (parseFloat(_match[2], 10)).toFixed(2), (parseFloat(_match[3], 10)).toFixed(2)])).concat([parseFloat(_match[4], 10)]);
        })());
      },
      VECAArray: function(value) {
        return this.color('VECAArray', value, (function() {
          return (Convert.vecToRgb(value)).concat([value[3]]);
        })());
      },
      HEX: function(value) {
        return this.color('HEX', value, (function() {
          return (Convert.hexToRgb(value)).concat([1]);
        })());
      },
      HEXA: function(value) {
        return this.color('HEXA', value, (function() {
          var _match;
          _match = value.match(COLOR_REGEXES.HEXA);
          return (Convert.hexToRgb(_match[1])).concat([parseFloat(_match[2], 10)]);
        })());
      }
    };
  };

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiL2hvbWUvc3lhaWYvLmF0b20vcGFja2FnZXMvY29sb3ItcGlja2VyL2xpYi9tb2R1bGVzL1NtYXJ0Q29sb3IuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtJO0VBQUEsTUFBTSxDQUFDLE9BQVAsR0FBaUIsU0FBQTtBQUNiLFFBQUE7SUFBQSxPQUFBLEdBQVUsQ0FBQyxPQUFBLENBQVEsV0FBUixDQUFELENBQUEsQ0FBQTtJQUtWLGFBQUEsR0FHSTtNQUFBLEdBQUEsRUFBSywwSUFBTDtNQUlBLElBQUEsRUFBTSxzS0FKTjtNQVFBLEdBQUEsRUFBSywwSUFSTDtNQVlBLElBQUEsRUFBTSxzS0FaTjtNQWdCQSxHQUFBLEVBQUssNEhBaEJMO01Bb0JBLElBQUEsRUFBTSxpS0FwQk47TUF3QkEsR0FBQSxFQUFNLDhMQXhCTjtNQTRCQSxJQUFBLEVBQU0sME5BNUJOO01BZ0NBLEdBQUEsRUFBSyxnQ0FoQ0w7TUFvQ0EsSUFBQSxFQUFNLDZFQXBDTjs7SUFxQ0osV0FBQSxHQUFjLENBQUMsS0FBRCxFQUFRLE1BQVIsRUFBZ0IsS0FBaEIsRUFBdUIsTUFBdkIsRUFBK0IsS0FBL0IsRUFBc0MsTUFBdEMsRUFBOEMsS0FBOUMsRUFBcUQsTUFBckQsRUFBNkQsTUFBN0QsRUFBcUUsS0FBckU7SUFLZCxDQUFBLEdBQUksU0FBQyxNQUFEO01BQ0EsTUFBQSxHQUFTLEVBQUEsR0FBSTtNQUdiLElBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFaLENBQWdCLCtCQUFoQixDQUFIO1FBQ0ksSUFBRyxNQUFPLENBQUEsQ0FBQSxDQUFQLEtBQWEsR0FBYixJQUFxQixNQUFPLENBQUEsQ0FBQSxDQUFQLEtBQWEsR0FBckM7QUFDSSxpQkFBTyxNQUFNLENBQUMsU0FBUCxDQUFpQixDQUFqQixFQURYO1NBQUEsTUFFSyxJQUFHLENBQUMsVUFBQSxDQUFXLE1BQVgsRUFBbUIsRUFBbkIsQ0FBRCxDQUFBLEtBQTJCLENB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UixDQUFpQixLQUFqQixDQUFELENBQXdCLENBQUMsTUFBekIsQ0FBZ0MsQ0FBQyxLQUFNLENBQUEsQ0FBQSxDQUFQLENBQWhDO1FBRHlDLENBQUEsQ0FBSCxDQUFBLENBQTNCO01BQVgsQ0EzTlI7TUErTkgsR0FBQSxFQUFLLFNBQUMsS0FBRDtlQUFXLElBQUMsQ0FBQSxLQUFELENBQU8sS0FBUCxFQUFjLEtBQWQsRUFBd0IsQ0FBQSxTQUFBO0FBQ3BDLGlCQUFPLENBQUMsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsS0FBakIsQ0FBRCxDQUF3QixDQUFDLE1BQXpCLENBQWdDLENBQUMsQ0FBRCxDQUFoQztRQUQ2QixDQUFBLENBQUgsQ0FBQSxDQUFyQjtNQUFYLENBL05GO01BbU9ILElBQUEsRUFBTSxTQUFDLEtBQUQ7ZUFBVyxJQUFDLENBQUEsS0FBRCxDQUFPLE1BQVAsRUFBZSxLQUFmLEVBQXlCLENBQUEsU0FBQTtBQUN0QyxjQUFBO1VBQUEsTUFBQSxHQUFTLEtBQUssQ0FBQyxLQUFOLENBQVksYUFBYSxDQUFDLElBQTFCO0FBQ1QsaUJBQU8sQ0FBQyxPQUFPLENBQUMsUUFBUixDQUFpQixNQUFPLENBQUEsQ0FBQSxDQUF4QixDQUFELENBQTRCLENBQUMsTUFBN0IsQ0FBb0MsQ0FBQyxVQUFBLENBQVcsTUFBTyxDQUFBLENBQUEsQ0FBbEIsRUFBc0IsRUFBdEIsQ0FBRCxDQUFwQztRQUYrQixDQUFBLENBQUgsQ0FBQSxDQUF0QjtNQUFYLENBbk9IOztFQTVFTTtBQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuIyAgU21hcnRDb2xvclxuIyAgRWFzaWx5IGZpbmQgY29sb3JzLCBhbmQgY29udmVydCBiZXR3ZWVuIGNvbG9yIGZvcm1hdHNcbiMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSAtPlxuICAgICAgICBDb252ZXJ0ID0gKHJlcXVpcmUgJy4vQ29udmVydCcpKClcblxuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICMgIENvbG9yIFJlZ2V4ZXNcbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgQ09MT1JfUkVHRVhFUyA9XG4gICAgICAgICAgICAjIE1hdGNoZXMgSFNMOiBlZ1xuICAgICAgICAgICAgIyBoc2woMzIwLCAxMDAlLCAxMDAlKSBhbmQgaHNsKDI2LCA1NywgMzIpIGFuZCBoc2woICAgICAgMzYgICAsICAgIDY3ICAgLCAgIDE2IClcbiAgICAgICAgICAgIEhTTDogL2hzbFxccyo/XFwoXFxzKihbMC05XXxbMS05XVswLTldfFsxfDJdWzAtOV1bMC05XXwzWzAtNV1bMC05XXwzNjApXFxzKj8sXFxzKj8oWzAtOV18WzEtOV1bMC05XXwxMDApXFwlP1xccyo/LFxccyo/KFswLTldfFsxLTldWzAtOV18MTAwKVxcJT9cXHMqXFwpL2lcblxuICAgICAgICAgICAgIyBNYXRjaGVzIEhTTCArIEE6IGVnXG4gICAgICAgICAgICAjIGhzbGEoMzIwLCAxMDAlLCAzOCUsIDAuMykgYW5kIGhzbGEoMjYsIDU3LCAzMiwgLjMpIGFuZCBoc2xhKCAgICAgIDM2ICwgICAgNjcgICAsICAgMTYgICAsIDEuMCApIGFuZCBoc2xhKDAsIDAlLCAwJSwgMC40MilcbiAgICAgICAgICAgIEhTTEE6IC9oc2xhXFxzKj9cXChcXHMqKFswLTldfFsxLTldWzAtOV18WzF8Ml1bMC05XVswLTldfDNbMC01XVswLTldfDM2MClcXHMqPyxcXHMqPyhbMC05XXxbMS05XVswLTldfDEwMClcXCU/XFxzKj8sXFxzKj8oWzAtOV18WzEtOV1bMC05XXwxMDApXFwlP1xccyo/LFxccyo/KDB8MXwxLjB8MCpcXC5cXGQrKVxccyo/XFwpL2lcblxuICAgICAgICAgICAgIyBNYXRjaGVzIEhTVjogZWdcbiAgICAgICAgICAgICMgaHN2KDMyMCwgMTAwJSwgMTAwJSkgYW5kIGhzdigyNiwgNTcsIDMyKSBhbmQgaHN2KCAgICAgIDM2ICAgLCAgICA2NyAgICwgICAxNiApXG4gICAgICAgICAgICBIU1Y6IC9oc3ZcXHMqP1xcKFxccyooWzAtOV18WzEtOV1bMC05XXxbMXwyXVswLTldWzAtOV18M1swLTVdWzAtOV18MzYwKVxccyo/LFxccyo/KFswLTldfFsxLTldWzAtOV18MTAwKVxcJT9cXHMqPyxcXHMqPyhbMC05XXxbMS05XVswLTldfDEwMClcXCU/XFxzKlxcKS9pXG5cbiAgICAgICAgICAgICMgTWF0Y2hlcyBIU1YgKyBBOiBlZ1xuICAgICAgICAgICAgIyBoc3ZhKDMyMCwgMTAwJSwgMzglLCAwLjMpIGFuZCBoc3ZhKDI2LCA1NywgMzIsIC4zKSBhbmQgaHN2YSggICAgICAzNiAsICAgIDY3ICAgLCAgIDE2ICAgLCAwLjMgKSBhbmQgaHN2YSgwLCAwJSwgMCUsIDEuMClcbiAgICAgICAgICAgIEhTVkE6IC9oc3ZhXFxzKj9cXChcXHMqKFswLTldfFsxLTldWzAtOV18WzF8Ml1bMC05XVswLTldfDNbMC01XVswLTldfDM2MClcXHMqPyxcXHMqPyhbMC05XXxbMS05XVswLTldfDEwMClcXCU/XFxzKj8sXFxzKj8oWzAtOV18WzEtOV1bMC05XXwxMDApXFwlP1xccyo/LFxccyo/KDB8MXwxLjB8MCpcXC5cXGQrKVxccyo/XFwpL2lcblxuICAgICAgICAgICAgIyBNYXRjaGVzIFZFQzogZWdcbiAgICAgICAgICAgICMgdmVjMygwLjQ0ZiwgMC4zLCAwKSBhbmQgdmVjMygxLjAsIDAuNDIsIC40KSBhbmQgdmVjMyggICAgICAxZiAgLCAgICAwLjQgICAsICAgMS4wIClcbiAgICAgICAgICAgIFZFQzogL3ZlYzNcXHMqP1xcKFxccyo/KFswXT9cXC5bMC05XSp8MVxcLjB8MXwwKVtmXT9cXHMqP1xcLFxccyo/KFswXT9cXC5bMC05XSp8MVxcLjB8MXwwKVtmXT9cXHMqP1xcLFxccyo/KFswXT9cXC5bMC05XSp8MVxcLjB8MXwwKVtmXT9cXHMqP1xcKS9pXG5cbiAgICAgICAgICAgICMgTWF0Y2hlcyBWRUNBOiBlZ1xuICAgICAgICAgICAgIyB2ZWM0KDAuNCwgMC4zMywgMGYsIDAuNSkgYW5kIHZlYzQoMS4wLCAwLjQxMjEyMzFmLCAuNCwgMS4wZikgYW5kIHZlYzQoICAgICAgMWYgICAsICAgIDAuNCAgICwgICAxLjAsIDAgKVxuICAgICAgICAgICAgVkVDQTogL3ZlYzRcXHMqP1xcKFxccyo/KFswXT9cXC5bMC05XSp8MVxcLjB8MXwwKVtmXT9cXHMqP1xcLFxccyo/KFswXT9cXC5bMC05XSp8MVxcLjB8MXwwKVtmXT9cXHMqP1xcLFxccyo/KFswXT9cXC5bMC05XSp8MVxcLjB8MXwwKVtmXT9cXHMqP1xcLFxccyo/KFswXT9cXC5bMC05XSp8MVxcLjB8MXwwKVtmXT9cXHMqP1xcKS9pXG5cbiAgICAgICAgICAgICMgTWF0Y2hlcyBSR0I6IGVnLlxuICAgICAgICAgICAgIyByZ2IoMCwgOTksIDE5OSkgYW5kIHJnYiAoIDI1NSAgICwgMTgwICAgLCAyNTUgKVxuICAgICAgICAgICAgUkdCOiAgL3JnYlxccyo/XFwoXFxzKj8oWzAtOV18WzEtOV1bMC05XXwxWzAtOV1bMC05XXwyWzAtNF1bMC05XXwyNVswLTVdKVxccyo/LFxccyo/KFswLTldfFsxLTldWzAtOV18MVswLTldWzAtOV18MlswLTRdWzAtOV18MjVbMC01XSlcXHMqPyxcXHMqPyhbMC05XXxbMS05XVswLTldfDFbMC05XVswLTldfDJbMC00XVswLTldfDI1WzAtNV0pXFxzKj9cXCkvaVxuXG4gICAgICAgICAgICAjIE1hdGNoZXMgUkdCICsgQTogZWcuXG4gICAgICAgICAgICAjIHJnYmEoMCwgOTksIDE5OSwgMC4zKSBhbmQgcmdiYSAoIDgyICAgLCAgICAxMjEsICAgIDAsICAgICAuNjggIClcbiAgICAgICAgICAgIFJHQkE6IC9yZ2JhXFxzKj9cXChcXHMqPyhbMC05XXxbMS05XVswLTldfDFbMC05XVswLTldfDJbMC00XVs8MC05XXwyNVswLTVdKVxccyo/LFxccyo/KFswLTldfFsxLTldWzAtOV18MVswLTldWzAtOV18MlswLTRdWzAtOV18MjVbMC01XSlcXHMqPyxcXHMqPyhbMC05XXxbMS05XVswLTldfDFbMC05XVswLTldfDJbMC00XVswLTldfDI1WzAtNV0pXFxzKj8sXFxzKj8oMHwxfDEuMHwwKlxcLlxcZCspXFxzKj9cXCkvaVxuXG4gICAgICAgICAgICAjIE1hdGNoZXMgSEVYOlxuICAgICAgICAgICAgIyBlZy4gIzAwMCBhbmQgI2ZmZmZmZlxuICAgICAgICAgICAgSEVYOiAvKFxcI1thLWYwLTldezZ9fFxcI1thLWYwLTldezN9KS9pXG5cbiAgICAgICAgICAgICMgTWF0Y2hlcyBIRVggKyBBOiBlZ1xuICAgICAgICAgICAgIyByZ2JhKCNmZmYsIDAuMykgYW5kIHJnYmEoIzAwMDAwMCwgLjgpIGFuZCByZ2JhICggIzAwMCAgICAsIC44KVxuICAgICAgICAgICAgSEVYQTogL3JnYmFcXHMqP1xcKFxccyooXFwjW2EtZjAtOV17Nn18XFwjW2EtZjAtOV17M30pXFxzKj8sXFxzKj8oMHwxfDEuMHwwKlxcLlxcZCspXFxzKj9cXCkvaVxuICAgICAgICBNQVRDSF9PUkRFUiA9IFsnSFNMJywgJ0hTTEEnLCAnSFNWJywgJ0hTVkEnLCAnVkVDJywgJ1ZFQ0EnLCAnUkdCJywgJ1JHQkEnLCAnSEVYQScsICdIRVgnXVxuXG4gICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgIyAgQWJicmV2aWF0aW9uIGZ1bmN0aW9uc1xuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICBuID0gKG51bWJlcikgLT5cbiAgICAgICAgICAgIG51bWJlciA9IFwiI3sgbnVtYmVyIH1cIlxuXG4gICAgICAgICAgICAjIEFiYnJldmlhdGUgaWYgYGFiYnJldmlhdGVWYWx1ZXNgIG9wdGlvbiBpcyB0cnVlXG4gICAgICAgICAgICBpZiBhdG9tLmNvbmZpZy5nZXQgJ2NvbG9yLXBpY2tlci5hYmJyZXZpYXRlVmFsdWVzJ1xuICAgICAgICAgICAgICAgIGlmIG51bWJlclswXSBpcyAnMCcgYW5kIG51bWJlclsxXSBpcyAnLidcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlci5zdWJzdHJpbmcgMSAjIFRPRE8gb3IgYHN1YnN0cmA/XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAocGFyc2VGbG9hdCBudW1iZXIsIDEwKSBpcyAxXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnMSdcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJcbiAgICAgICAgZiA9IChudW1iZXIpIC0+XG4gICAgICAgICAgICBudW1iZXIgPSBcIiN7IG51bWJlciB9XCJcblxuICAgICAgICAgICAgaWYgbnVtYmVyWzNdIGFuZCBudW1iZXJbM10gaXMgJzAnXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bWJlci5zdWJzdHJpbmcgMCwgMyAjIFRPRE8gb3IgYHN1YnN0cmA/XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVyXG5cbiAgICAgICAgcyA9IChzdHJpbmcpIC0+XG4gICAgICAgICAgICBpZiBhdG9tLmNvbmZpZy5nZXQgJ2NvbG9yLXBpY2tlci5hYmJyZXZpYXRlVmFsdWVzJ1xuICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmcucmVwbGFjZSAvXFxzL2csICcnXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nXG5cbiAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAjICBQdWJsaWMgZnVuY3Rpb25hbGl0eVxuICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgIyAgRmluZCBjb2xvcnMgaW4gc3RyaW5nXG4gICAgICAgICMgIC0gc3RyaW5nIHtTdHJpbmd9XG4gICAgICAgICNcbiAgICAgICAgIyAgQHJldHVybiBTdHJpbmdcbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICBmaW5kOiAoc3RyaW5nKSAtPlxuICAgICAgICAgICAgICAgIFNtYXJ0Q29sb3IgPSB0aGlzXG4gICAgICAgICAgICAgICAgX2NvbG9ycyA9IFtdXG5cbiAgICAgICAgICAgICAgICBmb3IgX2Zvcm1hdCBpbiBNQVRDSF9PUkRFUiB3aGVuIF9yZWdFeHAgPSBDT0xPUl9SRUdFWEVTW19mb3JtYXRdXG4gICAgICAgICAgICAgICAgICAgIF9tYXRjaGVzID0gc3RyaW5nLm1hdGNoIChuZXcgUmVnRXhwIF9yZWdFeHAuc291cmNlLCAnaWcnKVxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZSB1bmxlc3MgX21hdGNoZXNcblxuICAgICAgICAgICAgICAgICAgICBmb3IgX21hdGNoIGluIF9tYXRjaGVzIHRoZW4gZG8gKF9mb3JtYXQsIF9tYXRjaCkgLT5cbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpZiAoX2luZGV4ID0gc3RyaW5nLmluZGV4T2YgX21hdGNoKSBpcyAtMVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBfY29sb3JzLnB1c2hcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaDogX21hdGNoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0OiBfZm9ybWF0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IF9pbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogX2luZGV4ICsgX21hdGNoLmxlbmd0aFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ2V0U21hcnRDb2xvcjogLT4gU21hcnRDb2xvcltfZm9ybWF0XShfbWF0Y2gpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDb2xvcjogdHJ1ZVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAjIFJlbW92ZSB0aGUgbWF0Y2ggZnJvbSB0aGUgbGluZSBjb250ZW50IHN0cmluZyB0b1xuICAgICAgICAgICAgICAgICAgICAgICAgIyDigJxtYXJrIGl04oCdIGFzIGhhdmluZyBiZWVuIOKAnHNwZW504oCdLiBCZSBjYXJlZnVsIHRvIGtlZXAgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAjIGNvcnJlY3QgYW1vdW50IG9mIGNoYXJhY3RlcnMgaW4gdGhlIHN0cmluZyBhcyB0aGlzIGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAjIGxhdGVyIHVzZWQgdG8gc2VlIHdoaWNoIG1hdGNoIGZpdHMgYmVzdCwgaWYgYW55XG4gICAgICAgICAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZSBfbWF0Y2gsIChuZXcgQXJyYXkgX21hdGNoLmxlbmd0aCArIDEpLmpvaW4gJyAnXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9jb2xvcnNcblxuICAgICAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgIyAgQmFzZSBjb2xvciBvYmplY3QsIGFsbCBjb2xvcnMgYXJlIHZlcnNpb25zIG9mIHRoaXMgb2JqZWN0XG4gICAgICAgICMgIC0gZm9ybWF0IHtTdHJpbmd9OiB0aGUgY29sb3IgZm9ybWF0XG4gICAgICAgICMgIC0gdmFsdWUge1N0cmluZ3xBcnJheX06IFRoZSBjb2xvciB2YWx1ZVxuICAgICAgICAjICAtIFJHQkFBcnJheSB7QXJyYXl9OiBUaGUgY29sb3IgdmFsdWUgaW4gUkdCQUFycmF5IGZvcm1hdFxuICAgICAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIGNvbG9yOiAoZm9ybWF0LCB2YWx1ZSwgUkdCQUFycmF5KSAtPlxuICAgICAgICAgICAgICAgIGZvcm1hdDogZm9ybWF0XG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgUkdCQUFycmF5OiBSR0JBQXJyYXlcblxuICAgICAgICAgICAgICAgICMgQ29tcGFyZSB0d28gc21hcnQgY29sb3JzXG4gICAgICAgICAgICAgICAgZXF1YWxzOiAoc21hcnRDb2xvcikgLT5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlIHVubGVzcyBzbWFydENvbG9yXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNtYXJ0Q29sb3IuUkdCQUFycmF5WzBdIGlzIEBSR0JBQXJyYXlbMF0gYW5kIHNtYXJ0Q29sb3IuUkdCQUFycmF5WzFdIGlzIEBSR0JBQXJyYXlbMV0gYW5kXG4gICAgICAgICAgICAgICAgICAgIHNtYXJ0Q29sb3IuUkdCQUFycmF5WzJdIGlzIEBSR0JBQXJyYXlbMl0gYW5kXG4gICAgICAgICAgICAgICAgICAgIHNtYXJ0Q29sb3IuUkdCQUFycmF5WzNdIGlzIEBSR0JBQXJyYXlbM11cblxuICAgICAgICAgICAgICAgIGdldEFscGhhOiAtPiByZXR1cm4gQFJHQkFBcnJheVszXVxuXG4gICAgICAgICAgICAjICBSR0JcbiAgICAgICAgICAgICMgLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgdG9SR0I6IC0+IHJldHVybiBzIFwicmdiKCN7IEB0b1JHQkFycmF5KCkuam9pbiAnLCAnIH0pXCJcbiAgICAgICAgICAgICAgICB0b1JHQkFycmF5OiAtPiBbQFJHQkFBcnJheVswXSwgQFJHQkFBcnJheVsxXSwgQFJHQkFBcnJheVsyXV1cblxuICAgICAgICAgICAgICAgICMgUkdCQVxuICAgICAgICAgICAgICAgIHRvUkdCQTogLT5cbiAgICAgICAgICAgICAgICAgICAgX3JnYmFBcnJheSA9IEB0b1JHQkFBcnJheSgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzIFwicmdiYSgjeyBfcmdiYUFycmF5WzBdIH0sICN7IF9yZ2JhQXJyYXlbMV0gfSwgI3sgX3JnYmFBcnJheVsyXSB9LCAjeyBuIF9yZ2JhQXJyYXlbM10gfSlcIlxuICAgICAgICAgICAgICAgIHRvUkdCQUFycmF5OiAtPiBAUkdCQUFycmF5XG5cbiAgICAgICAgICAgICMgIEhTTFxuICAgICAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICB0b0hTTDogLT5cbiAgICAgICAgICAgICAgICAgICAgX2hzbEFycmF5ID0gQHRvSFNMQXJyYXkoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcyBcImhzbCgjeyBfaHNsQXJyYXlbMF0gfSwgI3sgX2hzbEFycmF5WzFdIH0lLCAjeyBfaHNsQXJyYXlbMl0gfSUpXCJcbiAgICAgICAgICAgICAgICB0b0hTTEFycmF5OiAtPiBDb252ZXJ0LnJnYlRvSHNsIEB0b1JHQkFycmF5KClcblxuICAgICAgICAgICAgICAgICMgSFNMQVxuICAgICAgICAgICAgICAgIHRvSFNMQTogLT5cbiAgICAgICAgICAgICAgICAgICAgX2hzbGFBcnJheSA9IEB0b0hTTEFBcnJheSgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzIFwiaHNsYSgjeyBfaHNsYUFycmF5WzBdIH0sICN7IF9oc2xhQXJyYXlbMV0gfSUsICN7IF9oc2xhQXJyYXlbMl0gfSUsICN7IG4gX2hzbGFBcnJheVszXSB9KVwiXG4gICAgICAgICAgICAgICAgdG9IU0xBQXJyYXk6IC0+IEB0b0hTTEFycmF5KCkuY29uY2F0IFtAZ2V0QWxwaGEoKV1cblxuICAgICAgICAgICAgIyAgSFNWXG4gICAgICAgICAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIHRvSFNWOiAtPlxuICAgICAgICAgICAgICAgICAgICBfaHN2QXJyYXkgPSBAdG9IU1ZBcnJheSgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzIFwiaHN2KCN7IE1hdGgucm91bmQgX2hzdkFycmF5WzBdIH0sICN7IChfaHN2QXJyYXlbMV0gKiAxMDApIDw8IDAgfSUsICN7IChfaHN2QXJyYXlbMl0gKiAxMDApIDw8IDAgfSUpXCJcbiAgICAgICAgICAgICAgICB0b0hTVkFycmF5OiAtPiBDb252ZXJ0LnJnYlRvSHN2IEB0b1JHQkFycmF5KClcblxuICAgICAgICAgICAgICAgICMgSFNWQVxuICAgICAgICAgICAgICAgIHRvSFNWQTogLT5cbiAgICAgICAgICAgICAgICAgICAgX2hzdmFBcnJheSA9IEB0b0hTVkFBcnJheSgpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzIFwiaHN2YSgjeyBNYXRoLnJvdW5kIF9oc3ZhQXJyYXlbMF0gfSwgI3sgKF9oc3ZhQXJyYXlbMV0gKiAxMDApIDw8IDAgfSUsICN7IChfaHN2YUFycmF5WzJdICogMTAwKSA8PCAwIH0lLCAjeyBuIF9oc3ZhQXJyYXlbM10gfSlcIlxuICAgICAgICAgICAgICAgIHRvSFNWQUFycmF5OiAtPiBAdG9IU1ZBcnJheSgpLmNvbmNhdCBbQGdldEFscGhhKCldXG5cbiAgICAgICAgICAgICMgIFZFQ1xuICAgICAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICB0b1ZFQzogLT5cbiAgICAgICAgICAgICAgICAgICAgX3ZlY0FycmF5ID0gQHRvVkVDQXJyYXkoKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcyBcInZlYzMoI3sgZiBfdmVjQXJyYXlbMF0gfSwgI3sgZiBfdmVjQXJyYXlbMV0gfSwgI3sgZiBfdmVjQXJyYXlbMl0gfSlcIlxuICAgICAgICAgICAgICAgIHRvVkVDQXJyYXk6IC0+IENvbnZlcnQucmdiVG9WZWMgQHRvUkdCQXJyYXkoKVxuXG4gICAgICAgICAgICAgICAgIyBWRUNBXG4gICAgICAgICAgICAgICAgdG9WRUNBOiAtPlxuICAgICAgICAgICAgICAgICAgICBfdmVjYUFycmF5ID0gQHRvVkVDQUFycmF5KClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMgXCJ2ZWM0KCN7IGYgX3ZlY2FBcnJheVswXSB9LCAjeyBmIF92ZWNhQXJyYXlbMV0gfSwgI3sgZiBfdmVjYUFycmF5WzJdIH0sICN7IGYgX3ZlY2FBcnJheVszXSB9KVwiXG4gICAgICAgICAgICAgICAgdG9WRUNBQXJyYXk6IC0+IEB0b1ZFQ0FycmF5KCkuY29uY2F0IFsoQGdldEFscGhhKCkpLnRvRml4ZWQgMl1cblxuICAgICAgICAgICAgIyAgSEVYXG4gICAgICAgICAgICAjIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgIHRvSEVYOiAtPlxuICAgICAgICAgICAgICAgICAgICBfaGV4ID0gQ29udmVydC5yZ2JUb0hleCBAUkdCQUFycmF5XG5cbiAgICAgICAgICAgICAgICAgICAgIyBBYmJyZXZpYXRlIGlmIGBhYmJyZXZpYXRlVmFsdWVzYCBvcHRpb24gaXMgdHJ1ZVxuICAgICAgICAgICAgICAgICAgICBpZiBhdG9tLmNvbmZpZy5nZXQgJ2NvbG9yLXBpY2tlci5hYmJyZXZpYXRlVmFsdWVzJ1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgX2hleFswXSBpcyBfaGV4WzFdIGFuZCBfaGV4WzJdIGlzIF9oZXhbM10gYW5kIF9oZXhbNF0gaXMgX2hleFs1XVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9oZXggPSBcIiN7IF9oZXhbMF0gfSN7IF9oZXhbMl0gfSN7IF9oZXhbNF0gfVwiXG5cbiAgICAgICAgICAgICAgICAgICAgIyBVcHBlcmNhc2UgY29sb3IgdmFsdWVzIGlmIGB1cHBlcmNhc2VDb2xvclZhbHVlc2Agb3B0aW9uIGlzIHRydWVcbiAgICAgICAgICAgICAgICAgICAgaWYgYXRvbS5jb25maWcuZ2V0ICdjb2xvci1waWNrZXIudXBwZXJjYXNlQ29sb3JWYWx1ZXMnXG4gICAgICAgICAgICAgICAgICAgICAgICBfaGV4ID0gX2hleC50b1VwcGVyQ2FzZSgpXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICcjJyArIF9oZXhcblxuICAgICAgICAgICAgICAgICMgSEVYQVxuICAgICAgICAgICAgICAgIHRvSEVYQTogLT4gcyBcInJnYmEoI3sgQHRvSEVYKCkgfSwgI3sgbiBAZ2V0QWxwaGEoKSB9KVwiXG5cbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICMgIENvbG9yIGlucHV0IGZvcm1hdHMuLi5cbiAgICAgICAgIyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAjIFJHQlxuICAgICAgICAgICAgUkdCOiAodmFsdWUpIC0+IEBjb2xvciAnUkdCJywgdmFsdWUsIGRvIC0+XG4gICAgICAgICAgICAgICAgX21hdGNoID0gdmFsdWUubWF0Y2ggQ09MT1JfUkVHRVhFUy5SR0JcblxuICAgICAgICAgICAgICAgIHJldHVybiAoW1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludCBfbWF0Y2hbMV0sIDEwXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50IF9tYXRjaFsyXSwgMTBcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQgX21hdGNoWzNdLCAxMFxuICAgICAgICAgICAgICAgIF0pLmNvbmNhdCBbMV0gIyBhZGQgZGVmYXVsdCBhbHBoYVxuICAgICAgICAgICAgUkdCQXJyYXk6ICh2YWx1ZSkgLT4gQGNvbG9yICdSR0JBcnJheScsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZS5jb25jYXQgWzFdXG5cbiAgICAgICAgICAgICMgUkdCQVxuICAgICAgICAgICAgUkdCQTogKHZhbHVlKSAtPiBAY29sb3IgJ1JHQkEnLCB2YWx1ZSwgZG8gLT5cbiAgICAgICAgICAgICAgICBfbWF0Y2ggPSB2YWx1ZS5tYXRjaCBDT0xPUl9SRUdFWEVTLlJHQkFcblxuICAgICAgICAgICAgICAgIHJldHVybiAoW1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludCBfbWF0Y2hbMV0sIDEwXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50IF9tYXRjaFsyXSwgMTBcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQgX21hdGNoWzNdLCAxMFxuICAgICAgICAgICAgICAgIF0pLmNvbmNhdCBbcGFyc2VGbG9hdCBfbWF0Y2hbNF0sIDEwXVxuICAgICAgICAgICAgUkdCQUFycmF5OiAodmFsdWUpIC0+IEBjb2xvciAnUkdCQUFycmF5JywgdmFsdWUsIHZhbHVlXG5cbiAgICAgICAgICAgICMgSFNMXG4gICAgICAgICAgICBIU0w6ICh2YWx1ZSkgLT4gQGNvbG9yICdIU0wnLCB2YWx1ZSwgZG8gLT5cbiAgICAgICAgICAgICAgICBfbWF0Y2ggPSB2YWx1ZS5tYXRjaCBDT0xPUl9SRUdFWEVTLkhTTFxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChDb252ZXJ0LmhzbFRvUmdiIFtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQgX21hdGNoWzFdLCAxMFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludCBfbWF0Y2hbMl0sIDEwXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50IF9tYXRjaFszXSwgMTBcbiAgICAgICAgICAgICAgICBdKS5jb25jYXQgWzFdICMgYWRkIGRlZmF1bHQgYWxwaGFcbiAgICAgICAgICAgIEhTTEFycmF5OiAodmFsdWUpIC0+IEBjb2xvciAnSFNMQXJyYXknLCB2YWx1ZSwgZG8gLT5cbiAgICAgICAgICAgICAgICByZXR1cm4gKENvbnZlcnQuaHNsVG9SZ2IgdmFsdWUpLmNvbmNhdCBbMV1cblxuICAgICAgICAgICAgIyBIU0xBXG4gICAgICAgICAgICBIU0xBOiAodmFsdWUpIC0+IEBjb2xvciAnSFNMQScsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIF9tYXRjaCA9IHZhbHVlLm1hdGNoIENPTE9SX1JFR0VYRVMuSFNMQVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChDb252ZXJ0LmhzbFRvUmdiIFtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQgX21hdGNoWzFdLCAxMFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludCBfbWF0Y2hbMl0sIDEwXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50IF9tYXRjaFszXSwgMTBcbiAgICAgICAgICAgICAgICBdKS5jb25jYXQgW3BhcnNlRmxvYXQgX21hdGNoWzRdLCAxMF1cbiAgICAgICAgICAgIEhTTEFBcnJheTogKHZhbHVlKSAtPiBAY29sb3IgJ0hTTEFBcnJheScsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIHJldHVybiAoQ29udmVydC5oc2xUb1JnYiB2YWx1ZSkuY29uY2F0IFt2YWx1ZVszXV1cblxuICAgICAgICAgICAgIyBIU1ZcbiAgICAgICAgICAgIEhTVjogKHZhbHVlKSAtPiBAY29sb3IgJ0hTVicsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIF9tYXRjaCA9IHZhbHVlLm1hdGNoIENPTE9SX1JFR0VYRVMuSFNWXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKENvbnZlcnQuaHN2VG9SZ2IgW1xuICAgICAgICAgICAgICAgICAgICBwYXJzZUludCBfbWF0Y2hbMV0sIDEwXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50IF9tYXRjaFsyXSwgMTBcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQgX21hdGNoWzNdLCAxMFxuICAgICAgICAgICAgICAgIF0pLmNvbmNhdCBbMV1cbiAgICAgICAgICAgIEhTVkFycmF5OiAodmFsdWUpIC0+IEBjb2xvciAnSFNWQXJyYXknLCB2YWx1ZSwgZG8gLT5cbiAgICAgICAgICAgICAgICByZXR1cm4gKENvbnZlcnQuaHN2VG9SZ2IgdmFsdWUpLmNvbmNhdCBbMV1cblxuICAgICAgICAgICAgIyBIU1ZBXG4gICAgICAgICAgICBIU1ZBOiAodmFsdWUpIC0+IEBjb2xvciAnSFNWQScsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIF9tYXRjaCA9IHZhbHVlLm1hdGNoIENPTE9SX1JFR0VYRVMuSFNWQVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChDb252ZXJ0LmhzdlRvUmdiIFtcbiAgICAgICAgICAgICAgICAgICAgcGFyc2VJbnQgX21hdGNoWzFdLCAxMFxuICAgICAgICAgICAgICAgICAgICBwYXJzZUludCBfbWF0Y2hbMl0sIDEwXG4gICAgICAgICAgICAgICAgICAgIHBhcnNlSW50IF9tYXRjaFszXSwgMTBcbiAgICAgICAgICAgICAgICBdKS5jb25jYXQgW3BhcnNlRmxvYXQgX21hdGNoWzRdLCAxMF1cbiAgICAgICAgICAgIEhTVkFBcnJheTogKHZhbHVlKSAtPiBAY29sb3IgJ0hTVkFBcnJheScsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIHJldHVybiAoQ29udmVydC5oc3ZUb1JnYiB2YWx1ZSkuY29uY2F0IFt2YWx1ZVszXV1cblxuICAgICAgICAgICAgIyBWRUNcbiAgICAgICAgICAgIFZFQzogKHZhbHVlKSAtPiBAY29sb3IgJ1ZFQycsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIF9tYXRjaCA9IHZhbHVlLm1hdGNoIENPTE9SX1JFR0VYRVMuVkVDXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gKENvbnZlcnQudmVjVG9SZ2IgW1xuICAgICAgICAgICAgICAgICAgICAocGFyc2VGbG9hdCBfbWF0Y2hbMV0sIDEwKS50b0ZpeGVkIDJcbiAgICAgICAgICAgICAgICAgICAgKHBhcnNlRmxvYXQgX21hdGNoWzJdLCAxMCkudG9GaXhlZCAyXG4gICAgICAgICAgICAgICAgICAgIChwYXJzZUZsb2F0IF9tYXRjaFszXSwgMTApLnRvRml4ZWQgMlxuICAgICAgICAgICAgICAgIF0pLmNvbmNhdCBbMV1cbiAgICAgICAgICAgIFZFQ0FycmF5OiAodmFsdWUpIC0+IEBjb2xvciAnVkVDQXJyYXknLCB2YWx1ZSwgZG8gLT5cbiAgICAgICAgICAgICAgICByZXR1cm4gKENvbnZlcnQudmVjVG9SZ2IgdmFsdWUpLmNvbmNhdCBbMV1cblxuICAgICAgICAgICAgIyBWRUNBXG4gICAgICAgICAgICBWRUNBOiAodmFsdWUpIC0+IEBjb2xvciAnVkVDQScsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIF9tYXRjaCA9IHZhbHVlLm1hdGNoIENPTE9SX1JFR0VYRVMuVkVDQVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIChDb252ZXJ0LnZlY1RvUmdiIFtcbiAgICAgICAgICAgICAgICAgICAgKHBhcnNlRmxvYXQgX21hdGNoWzFdLCAxMCkudG9GaXhlZCAyXG4gICAgICAgICAgICAgICAgICAgIChwYXJzZUZsb2F0IF9tYXRjaFsyXSwgMTApLnRvRml4ZWQgMlxuICAgICAgICAgICAgICAgICAgICAocGFyc2VGbG9hdCBfbWF0Y2hbM10sIDEwKS50b0ZpeGVkIDJcbiAgICAgICAgICAgICAgICBdKS5jb25jYXQgW3BhcnNlRmxvYXQgX21hdGNoWzRdLCAxMF1cbiAgICAgICAgICAgIFZFQ0FBcnJheTogKHZhbHVlKSAtPiBAY29sb3IgJ1ZFQ0FBcnJheScsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIHJldHVybiAoQ29udmVydC52ZWNUb1JnYiB2YWx1ZSkuY29uY2F0IFt2YWx1ZVszXV1cblxuICAgICAgICAgICAgIyBIRVhcbiAgICAgICAgICAgIEhFWDogKHZhbHVlKSAtPiBAY29sb3IgJ0hFWCcsIHZhbHVlLCBkbyAtPlxuICAgICAgICAgICAgICAgIHJldHVybiAoQ29udmVydC5oZXhUb1JnYiB2YWx1ZSkuY29uY2F0IFsxXVxuXG4gICAgICAgICAgICAjIEhFWEFcbiAgICAgICAgICAgIEhFWEE6ICh2YWx1ZSkgLT4gQGNvbG9yICdIRVhBJywgdmFsdWUsIGRvIC0+XG4gICAgICAgICAgICAgICAgX21hdGNoID0gdmFsdWUubWF0Y2ggQ09MT1JfUkVHRVhFUy5IRVhBXG4gICAgICAgICAgICAgICAgcmV0dXJuIChDb252ZXJ0LmhleFRvUmdiIF9tYXRjaFsxXSkuY29uY2F0IFtwYXJzZUZsb2F0IF9tYXRjaFsyXSwgMTBdXG4gICAgICAgIH1cbiJdfQ==
